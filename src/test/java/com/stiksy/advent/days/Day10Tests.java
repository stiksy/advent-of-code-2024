package com.stiksy.advent.days;

import org.junit.jupiter.api.Test;

import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class Day10Tests {
    String input1 =
            "...0...\n" +
            "...1...\n" +
            "...2...\n" +
            "6543456\n" +
            "7.....7\n" +
            "8.....8\n" +
            "9.....9";
    String input2 =
            "10..9..\n" +
            "2...8..\n" +
            "3...7..\n" +
            "4567654\n" +
            "...8..3\n" +
            "...9..2\n" +
            ".....01";
    String largeInput =
            "89010123\n" +
            "78121874\n" +
            "87430965\n" +
            "96549874\n" +
            "45678903\n" +
            "32019012\n" +
            "01329801\n" +
            "10456732";
    String finalInput =
            "210783456778967870123014510101265430321567841067432103\n" +
            "389892167865430965232323623432278921430438932398963412\n" +
            "456787018917821234301056798542103450543228940187876503\n" +
            "144567878706980031212349887653012760690117651256901414\n" +
            "033178989215432120103498978954321821789807652349832365\n" +
            "122017676321056763234567827667430930989778943210765474\n" +
            "221022345432349804589432014578123045678654332122110389\n" +
            "478431001234989812676541323489054101569743221043011268\n" +
            "569532102145676543234540983234569232478890104454345457\n" +
            "459643243054321789107632872110878745323210223467276306\n" +
            "348758954567810654308901962028964656910343210568189210\n" +
            "232367985678910563213456451038943247871356901879011232\n" +
            "141031076589623410012847302347652198961267812921010941\n" +
            "056122125486543223678998218956981067650345765832349850\n" +
            "347034234397890104556780127965671230347876854767456767\n" +
            "298965340987013278943012876871060141236989945678945698\n" +
            "100879891056324562102103945432054650105410834100034501\n" +
            "321410702345456983478754434567123789870320123211129632\n" +
            "492323612101237874569569123458870123561016784342568543\n" +
            "585494543087654723433478010789969834432125692103477655\n" +
            "676788984599123014529821021056954765893236543238989856\n" +
            "569876678678043565810730112347823876734567832397650765\n" +
            "108765549432154378925643209454210985621696941987041654\n" +
            "012014230556069210234758998763401034100787100456132545\n" +
            "321023121687678776107867812012310123212898912343203456\n" +
            "434564087794502985289978903401498921089877654132112347\n" +
            "543478096893211234676129984512347832210168743043032298\n" +
            "692109145232120140165038777601056544301259012158941187\n" +
            "783013234141034051234345668932347895614348747867650016\n" +
            "014560179054543761018903456787890198754109636958934567\n" +
            "323678788765656890127812345196781256543234545567825898\n" +
            "014989699656387787436541014012376387012373236430012327\n" +
            "123176540345494598545632123963465498106789108921183210\n" +
            "034012331256923687656543010876501065410632107847894789\n" +
            "545143422107810765467852196549432678321541096556905654\n" +
            "696654212212701899321946587038944569432532187443211565\n" +
            "787963401321432108910707432127653654549651056300120478\n" +
            "297872317450545657659818956012102165678740145212321329\n" +
            "187701298764696780348723347654245074569632238305433210\n" +
            "056781084543787691230654218923336789430101109876543678\n" +
            "145692985652310541021783204510421123321243278898694589\n" +
            "232343898721023432012895145654530014562354569167783098\n" +
            "621956782891236781763676034789691125671234321016012187\n" +
            "560845021760545890854985421056787323980765012345323456\n" +
            "456732130450674348921234678547845418345896721056891012\n" +
            "308212345321189267630104549430989509216765892234732127\n" +
            "219800456542010106549843230121678678107874763105645298\n" +
            "056701067434329010178760101456563212078983654267836787\n" +
            "147832198125018723269053212387654103147672101756921898\n" +
            "232943219096527654450144528498987054234598767843410189\n" +
            "981856901787403434543239609801256964374567056932501278\n" +
            "870987897898912523692108718712345878985432145001652567\n" +
            "561010762345809610787230125621236323476301232156743410\n" +
            "654323451056718721676343234210987410565432343239874323";

    @Test
    void getMap() {
        Day10 day10 = new Day10();
        char[][] map = day10.getMap(input1);
        assertEquals('0', map[0][3]);
    }

    @Test
    void getStartPositions1() {
        Day10 day10 = new Day10();
        char[][] map = day10.getMap(input1);
        List<int[]> startPositions = day10.getStartPositions(map);
        assertEquals(1, startPositions.size());
        assertEquals(0, startPositions.get(0)[0]);
        assertEquals(3, startPositions.get(0)[1]);
    }

    @Test
    void getStartPositions2() {
        Day10 day10 = new Day10();
        char[][] map = day10.getMap(input2);
        List<int[]> startPositions = day10.getStartPositions(map);
        assertEquals(2, startPositions.size());
        assertEquals(0, startPositions.get(0)[0]);
        assertEquals(1, startPositions.get(0)[1]);
        assertEquals(6, startPositions.get(1)[0]);
        assertEquals(5, startPositions.get(1)[1]);
    }

    @Test
    void getNextSteps() {
        Day10 day10 = new Day10();
        char[][] map = day10.getMap(input1);
        List<int[]> nextSteps = day10.getNextSteps(new int[]{0, 3}, map);
        assertEquals(1, nextSteps.size());
        assertEquals(1, nextSteps.get(0)[0]);
        assertEquals(3, nextSteps.get(0)[1]);
        nextSteps = day10.getNextSteps(new int[]{3, 3}, map);
        assertEquals(2, nextSteps.size());
        assertEquals(3, nextSteps.get(0)[0]);
        assertEquals(2, nextSteps.get(0)[1]);
        assertEquals(3, nextSteps.get(1)[0]);
        assertEquals(4, nextSteps.get(1)[1]);
    }

    @Test
    void walk() {
        Day10 day10 = new Day10();
        char[][] map1 = day10.getMap(input1);
        List<int[]> startPositions1 = day10.getStartPositions(map1);
        int validPaths1 = day10.walk(map1, startPositions1);
        assertEquals(2, validPaths1);
        char[][] map2 = day10.getMap(input2);
        List<int[]> startPositions2 = day10.getStartPositions(map2);
        int validPaths2 = day10.walk(map2, startPositions2);
        assertEquals(3, validPaths2);
    }

    @Test
    void walkLargeInput() {
        Day10 day10 = new Day10();
        char[][] map = day10.getMap(largeInput);
        List<int[]> startPositions = day10.getStartPositions(map);
        int validPaths = day10.walk(map, startPositions);
        assertEquals(36, validPaths);
    }

    @Test
    void walkFinalInput() {
        Day10 day10 = new Day10();
        char[][] map = day10.getMap(finalInput);
        List<int[]> startPositions = day10.getStartPositions(map);
        int validPaths = day10.walk(map, startPositions);
        assertEquals(659, validPaths);
    }
}
